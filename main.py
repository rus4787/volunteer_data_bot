import tomli
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from database import add_user
from telegram.error import TelegramError
import os

async def error_handler(update: object, context: CallbackContext) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ secrets.toml
def load_token():
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ secrets.toml
        with open("secrets.toml", "rb") as f:
            secrets = tomli.load(f)
            return secrets["secret_token"]["TOKEN_tell"]
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("TOKEN_tell")
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª secrets.toml –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN_tell")
        return token

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
TOKEN = load_token()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    await update.message.reply_photo(
        photo=open("DALLE.png", "rb"),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª DALLE.png –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
        caption=(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! \n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ IT! üåä –ú—ã –±–æ—Ä–µ–º—Å—è —Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ —Ä–∞–∑–ª–∏–≤–∞ –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ß–µ—Ä–Ω–æ–º –º–æ—Ä–µ —É –±–µ—Ä–µ–≥–æ–≤ –ê–Ω–∞–ø—ã. "
            "–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å–ø–∞—Å–µ–Ω–∏–µ –º–æ—Ä—Å–∫–æ–π —Ñ–ª–æ—Ä—ã –∏ —Ñ–∞—É–Ω—ã, –æ—á–∏—Å—Ç–∫–∞ –ø–æ–±–µ—Ä–µ–∂—å—è –æ—Ç –º–∞–∑—É—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. "
            "–ö–∞–∂–¥—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä –≤–∞–∂–µ–Ω!üõü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å –ø—Ä–∏—Ä–æ–¥–µ! üåø\n"
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—Å—è —Å–±–æ—Ä –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.üíª"
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
async def register_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    print(f"–ö–Ω–æ–ø–∫–∞ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
    await query.answer()

    # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")
        
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    user_id = query.from_user.id
    nickname = query.from_user.username
    if not nickname:  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await query.message.reply_text("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    nickname = f"@{nickname}" if not nickname.startswith("@") else nickname
    context.user_data['nickname'] = nickname
    context.user_data['state'] = 'enter_competencies'
    await query.message.reply_text(f"–í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {nickname}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, LLM, UI/UX, –±–æ—Ç—ã).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
async def cancel_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    print(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
    await query.answer()

    # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /start.")


def handle_optional_field(text):
    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if len(text.strip()) <= 1:
        return None
    return text.strip()


async def handle_competencies(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if not text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
        return

    context.user_data['competencies'] = text
    context.user_data['state'] = 'enter_roles'
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–∏–∑ —Å–ø–∏—Å–∫–∞: Project Management, –î–∏–∑–∞–π–Ω, –¢–µ–∫—Å—Ç, SMM, DevOps, Frontend, Backend, –ß–∞—Ç –±–æ—Ç—ã, –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –î–∞–Ω–Ω—ã–µ, –ü–æ–º–æ—â–Ω–∏–∫, LLM, ChatGPT, –ù–µ–π—Ä–æ—Å–µ—Ç–∏, AI, HR, –§–∞–∫—Ç—á–µ–∫–µ—Ä, –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –ñ—É—Ä–Ω–∞–ª–∏—Å—Ç, Midjourney, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, ML, QGIS, –ê—É–¥–∏–æ, —Å–∞—É–Ω–¥-–¥–∏–∑–∞–π–Ω):")


async def handle_roles(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if not text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("–†–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
        return

    context.user_data['roles'] = text
    context.user_data['state'] = 'enter_timezone'
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–°–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä:"
    )


async def handle_timezone(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    context.user_data['timezone'] = handle_optional_field(text)
    context.user_data['state'] = 'enter_preferred_time'
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–ù-–ü–¢, 4 —á–∞—Å–∞, 10:00-18:00). "
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª:"
    )


async def handle_preferred_time(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    context.user_data['timezone'] = handle_optional_field(text)
    context.user_data['state'] = 'enter_github'
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )


async def handle_github(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if len(text) <= 1:
        context.user_data['github'] = None
    else:
        if "github.com/" in text:  # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            nickname = text.split("github.com/")[-1].strip("/")
        else:
            nickname = text.strip("@")
        context.user_data['github'] = f"@{nickname}"

    context.user_data['state'] = 'enter_additional_data'
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫:\n- –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö,\n- –ù–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥–∞–º –≤ ¬´–ø–æ–ª–µ–≤—ã–µ¬ª —É—Å–ª–æ–≤–∏—è.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª."
    )


async def handle_additional_data(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    context.user_data['additional_data'] = handle_optional_field(text)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
    try:
        add_user(
            user_id=update.effective_user.id,
            nickname=context.user_data['nickname'],
            competencies=context.user_data['competencies'],
            roles=context.user_data['roles'],
            tracker_access=True,
            timezone=context.user_data.get('timezone'),
            preferred_time=context.user_data.get('preferred_time'),
            github=context.user_data.get('github'),
            additional_data=context.user_data.get('additional_data'),
            form_status='–∑–∞–ø–æ–ª–Ω–µ–Ω–æ'
        )
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à [Telegram-–∫–∞–Ω–∞–ª](https://t.me/+kkxH8Z8y35ZmZDYy).\n"
            "2Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n"
            "3Ô∏è‚É£ –û–∂–∏–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –≤—ã–µ–∑–¥–∞—Ö.\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –ø—Ä–∏—Ä–æ–¥–µ! üåø"
        )
    except ValueError as e:
        await update.message.reply_text(str(e))
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    context.user_data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def handle_user_input(update: Update, context: CallbackContext):
    state = context.user_data.get('state')
    
    if not state:  # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    text = update.message.text.strip()

    if state == 'enter_competencies':
        await handle_competencies(update, context)
    elif state == 'enter_roles':
        await handle_roles(update, context)
    elif state == 'enter_timezone':
        await handle_timezone(update, context)
    elif state == 'enter_preferred_time':
        await handle_preferred_time(update, context)
    elif state == 'enter_github':
        await handle_github(update, context)
    elif state == 'enter_additional_data':
        await handle_additional_data(update, context)

        
# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(register_callback, pattern="^register$"))
    app.add_handler(CallbackQueryHandler(cancel_callback, pattern="^cancel$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()


